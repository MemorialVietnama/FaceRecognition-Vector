import os
import cv2
import numpy as np
import joblib
import pickle
import tensorflow as tf
from tensorflow.keras.models import load_model
from scipy.spatial.distance import mahalanobis
from matplotlib import pyplot as plt

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ vector.py
from vector import detect_face, extract_facial_features, calculate_threshold_region

os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
tf.get_logger().setLevel('ERROR')

class FaceRecognizer:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞"""
        self.encoder = None
        self.pca = None
        self.label_encoder = None
        self.class_params = None  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å class_params_pca –Ω–∞ class_params
        self._load_models()
    
    def _load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
            base_dir = os.path.dirname(os.path.abspath(__file__))
            model_dir = os.path.join(base_dir, 'model')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤)
            model_paths = {
                'encoder': os.path.join(model_dir, 'face_encoder.keras'),  # –ò–∑–º–µ–Ω–∏–ª encoder.keras –Ω–∞ face_encoder.keras
                'pca': os.path.join(model_dir, 'pca.pkl'),
                'label_encoder': os.path.join(model_dir, 'label_encoder.pkl'),
                'class_params': os.path.join(model_dir, 'class_params.pca.pkl')  # –ò–∑–º–µ–Ω–∏–ª class_params_pca.pkl –Ω–∞ class_params.pca.pkl
            }

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            missing_files = [name for name, path in model_paths.items() if not os.path.exists(path)]
            if missing_files:
                raise FileNotFoundError(
                    f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π: {', '.join(missing_files)}. "
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É: {model_dir}"
                )

            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
            print("‚åõ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ encoder
            self.encoder = load_model(model_paths['encoder'])
            print(f"‚úÖ Encoder –∑–∞–≥—Ä—É–∂–µ–Ω (Input: {self.encoder.input_shape}, Output: {self.encoder.output_shape})")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ PCA
            with open(model_paths['pca'], 'rb') as f:  # –ò–∑–º–µ–Ω–∏–ª joblib.load –Ω–∞ pickle.load
                self.pca = pickle.load(f)
            print(f"‚úÖ PCA –∑–∞–≥—Ä—É–∂–µ–Ω (–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {self.pca.n_components_})")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ LabelEncoder
            with open(model_paths['label_encoder'], 'rb') as f:  # –ò–∑–º–µ–Ω–∏–ª joblib.load –Ω–∞ pickle.load
                self.label_encoder = pickle.load(f)
            print(f"‚úÖ LabelEncoder –∑–∞–≥—Ä—É–∂–µ–Ω (–ö–ª–∞—Å—Å—ã: {self.label_encoder.classes_.tolist()})")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤
            with open(model_paths['class_params'], 'rb') as f:
                self.class_params = pickle.load(f)  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ class_params
            print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–ª–∞—Å—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(self.class_params)})")

        except FileNotFoundError as fnf_err:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {fnf_err}")
            raise
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {str(e)}")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("- –í–µ—Ä—Å–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .keras vs .h5)")
            print("- –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π")
            print("- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫")
            raise RuntimeError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏") from e

    def _process_image(self, image):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –¥–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        Args:
            image (np.ndarray): –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OpenCV)
        """
        print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü–∞
        face_image = detect_face(image)
        if face_image is None:
            raise ValueError("–õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
        print(f"–†–∞–∑–º–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞: {face_image.shape}")

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ä–∞–∑–º–µ—Ä—É, –æ–∂–∏–¥–∞–µ–º–æ–º—É –º–æ–¥–µ–ª—å—é (224x224)
        if face_image.shape[0] != 224 or face_image.shape[1] != 224:
            print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å {face_image.shape} –Ω–∞ (224, 224)")
            face_image = cv2.resize(face_image, (224, 224), interpolation=cv2.INTER_AREA)
        
        original_face_image = face_image.copy()

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        face_image = face_image / 255.0
        face_image = np.expand_dims(face_image, axis=0)  # –î–æ–±–∞–≤–ª—è–µ–º batch dimension

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –≤ –º–æ–¥–µ–ª—å
        if face_image.shape != (1, 224, 224, 3):
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è (1, 224, 224, 3), –ø–æ–ª—É—á–µ–Ω–æ {face_image.shape}")
        
        # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        encoded_vector = self.encoder.predict(face_image, verbose=0)[0]
        print(f"–í–µ–∫—Ç–æ—Ä –ø–æ—Å–ª–µ encoder: {encoded_vector.shape}")

        facial_features = extract_facial_features((face_image[0] * 255).astype(np.uint8))
        if facial_features is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –ª–∏—Ü–∞")
        print(f"–ü—Ä–∏–∑–Ω–∞–∫–∏ –ª–∏—Ü–∞: {facial_features.shape}")

        combined_vector = np.concatenate([encoded_vector.flatten(), facial_features])
        print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä: {combined_vector.shape}")

        combined_pca = self.pca.transform([combined_vector])
        print(f"–í–µ–∫—Ç–æ—Ä –ø–æ—Å–ª–µ PCA: {combined_pca.shape}")

        return combined_pca[0], original_face_image

    def _check_match(self, query_vector, threshold_factor=1.3):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ –≤ –ø–æ—Ä–æ–≥–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏"""
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è...")
        results = []

        for class_name, params in self.class_params.items():
            mean = params['mean']
            cov = params['cov']

            inv_cov = np.linalg.inv(cov)
            distance = mahalanobis(query_vector, mean, inv_cov)  # –æ–±–∞ (2,)

            region_params = calculate_threshold_region(cov, sigma=3.0)
            threshold_distance = np.sqrt(region_params['major_axis']**2 + region_params['minor_axis']**2) * threshold_factor

            confidence = max(0, 100 - (distance / threshold_distance) * 100) if distance <= threshold_distance else 0
            confidence = round(confidence, 2)

            matched = bool(distance <= threshold_distance)  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ bool
            results.append({
                'class': str(class_name),  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞
                'distance': float(distance),  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
                'threshold': float(threshold_distance),
                'matched': matched,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ bool, –∞ –Ω–µ numpy.bool_
                'confidence': float(confidence)
            })

        results.sort(key=lambda x: x['distance'])
        return results

    def _show_result(self, face_image, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"""
        plt.figure(figsize=(10, 6))
        face_image_rgb = cv2.cvtColor(face_image, cv2.COLOR_BGR2RGB)
        plt.imshow(face_image_rgb)
        plt.axis('off')

        title_text = ""
        matched_class = next((r for r in results if r['matched']), None)
        if matched_class:
            title_text = f"‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {matched_class['class']} ({matched_class['confidence']}%)"
            plt.title(title_text, fontsize=14, color='green')
        else:
            closest = results[0]
            title_text = f"‚ö†Ô∏è –ë–ª–∏–∂–∞–π—à–∏–π –∫–ª–∞—Å—Å: {closest['class']} ({closest['confidence']}%)"
            plt.title(title_text, fontsize=14, color='orange')

        print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, res in enumerate(results):
            matched_str = "‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç" if res['matched'] else "‚ùå –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
            conf = res['confidence']
            dist = res['distance']
            print(f"{i+1}. {res['class']}: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ = {dist:.4f}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = {conf:.2f}%, {matched_str}")

        plt.show()
    
    def recognize(self, image):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü–∞
        Args:
            image (np.ndarray): –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OpenCV)
        """
        try:
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            query_vector, face_image = self._process_image(image)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            results = self._check_match(query_vector)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            return results
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}")
            return None
